###########################################################################
#                            TextMate Snippets                            #
###########################################################################

priority -50

snippet def "#define ..."
#define ${1}
endsnippet

snippet #ifndef "#ifndef ... #define ... #endif"
#ifndef ${1/([A-Za-z0-9_]+).*/$1/}
#define ${1:SYMBOL} ${2:value}
#endif /* ifndef $1 */
endsnippet

snippet #if "#if #endif" b
#if ${1:0}
${VISUAL}${0}
#endif
endsnippet

snippet mark "#pragma mark (mark)"
#if 0
${1:#pragma mark -
}#pragma mark $2
#endif

$0
endsnippet

snippet main "main() (main)"
int main(int argc, char *argv[])
{
	${VISUAL}${0}
	return 0;
}
endsnippet

snippet for "for loop (for)"
for (${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {
	${VISUAL}${0}
}
endsnippet

snippet fori "for int loop (fori)"
for (${4:int} ${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {
	${VISUAL}${0}
}
endsnippet

snippet once "Include header once only guard"
#ifndef ${1:`!p
if not snip.c:
	import random, string
	name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
	rand = ''.join(random.sample(string.ascii_letters+string.digits, 8))
	snip.rv = ('%s_%s' % (name,rand)).upper()
else:
	snip.rv = snip.c`}
#define $1

${VISUAL}${0}

#endif /* end of include guard: $1 */
endsnippet

snippet fprintf "fprintf ..."
fprintf(${1:stderr}, "${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet eli "else if .. (eli)"
else if (${1:/* condition */}) {
	${VISUAL}${0}
}
endsnippet

snippet printf "printf .. (printf)"
printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet st "struct"
struct ${1:`!p snip.rv = (snip.basename or "name") + "_t"`} {
	${0:/* data */}
};
endsnippet

snippet fun "function" b
${1:void} ${2:function_name}(${3})
{
	${VISUAL}${0}
}
endsnippet

snippet fund "function declaration" b
${1:void} ${2:function_name}(${3});
endsnippet

# custom -----------------------------------------------------------------------

global !p

PARAM_IGNORE = set(['const', 'struct', 'union', '*const', '*struct', '*union', 
					'auto', 'volatile', 'restricted'])

def get_arg(arg):
	arg = [x for x in arg.split() if x not in PARAM_IGNORE]
	return arg[-1].strip(' \n*') if len(arg) > 1 else ''

def write_params_dox(t, snip):
	snip.rv = ''
	args = [get_arg(x) for x in t[4].split(',') if x]
	for arg in args:
		snip.rv += '\n' + ('    ' if snip.indent else '')
		snip.rv += ' * @param ' + arg + ' TODO'

def write_return_dox(t, snip):
	snip.rv = ''
	ret = t[1].strip()
	if ret != 'void':
		snip.rv += '\n' + ('    ' if snip.indent else '')
		snip.rv += ' * @return TODO'

endglobal

snippet mtd "C method with dox block" b
/**
 * TODO`!p write_params_dox(t, snip)``!p write_return_dox(t, snip)`
 * @throws ${5:Exception}
 */
extern ${1:void }${2:Class}_${3:method}(struct $2 *self, ${4:args});
endsnippet

snippet cmtd "C method with dox block" b
/**
 * TODO`!p write_params_dox(t, snip)``!p write_return_dox(t, snip)`
 * @throws ${5:Exception}
 */
extern ${1:void }${2:Class}_${3:method}(${4:args});
endsnippet

snippet imtd "C method with dox block" b
/**
 * TODO`!p write_params_dox(t, snip)``!p write_return_dox(t, snip)`
 * @throws ${5:Exception}
 */
${1:void }(*${2:method})(${3:void *}inst, ${4:args});
endsnippet

# vim:ft=snippets:
